openapi: 3.0.3
info:
  title: User Management API
  description: ユーザー管理のためのREST API。CRUD操作を提供します。
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: ローカル開発環境

paths:
  /users:
    get:
      summary: Get Users List
      description: ユーザー一覧を取得します。ページネーションをサポートします。
      parameters:
        - name: limit
          in: query
          description: 取得する件数（デフォルト: 10, 最大: 100）
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: スキップする件数（デフォルト: 0）
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: ユーザー一覧の取得に成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: 総ユーザー数
                  limit:
                    type: integer
                    description: 取得件数
                  offset:
                    type: integer
                    description: スキップ件数
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create User
      description: 新しいユーザーを作成します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: ユーザーの作成に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ユーザーID
        schema:
          type: integer
          format: int64
          minimum: 1

    get:
      summary: Get User by ID
      description: 指定されたIDのユーザー情報を取得します。
      responses:
        '200':
          description: ユーザー情報の取得に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update User
      description: 指定されたIDのユーザー情報を更新します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: ユーザー情報の更新に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete User
      description: 指定されたIDのユーザーを削除します（論理削除）。
      responses:
        '204':
          description: ユーザーの削除に成功
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーの一意識別子
          example: 1
        name:
          type: string
          maxLength: 100
          description: ユーザーの表示名
          example: "田中太郎"
        email:
          type: string
          format: email
          maxLength: 255
          description: ユーザーのメールアドレス
          example: "tanaka@example.com"
        created_at:
          type: string
          format: date-time
          description: レコード作成日時
          example: "2023-12-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: レコード最終更新日時
          example: "2023-12-01T12:00:00Z"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          description: ユーザーの表示名
          example: "田中太郎"
        email:
          type: string
          format: email
          maxLength: 255
          description: ユーザーのメールアドレス
          example: "tanaka@example.com"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 1
          description: ユーザーの表示名
          example: "田中太郎"
        email:
          type: string
          format: email
          maxLength: 255
          description: ユーザーのメールアドレス
          example: "tanaka@example.com"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: エラーコード
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: エラーメッセージ
          example: "バリデーションエラーが発生しました"
        details:
          type: array
          description: 詳細なエラー情報
          items:
            type: object
            properties:
              field:
                type: string
                description: エラーが発生したフィールド名
                example: "email"
              message:
                type: string
                description: フィールド固有のエラーメッセージ
                example: "有効なメールアドレスを入力してください"

  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "リクエストのバリデーションに失敗しました"
            details:
              - field: "email"
                message: "有効なメールアドレスを入力してください"

    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "USER_NOT_FOUND"
            message: "指定されたユーザーが見つかりません"

    Conflict:
      description: リソースの競合が発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "EMAIL_ALREADY_EXISTS"
            message: "このメールアドレスは既に使用されています"

    InternalServerError:
      description: 内部サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "内部サーバーエラーが発生しました"